function step3_fitMVAR_computeConn(subj, earlyFraction)
clearvars -except subj earlyFraction;
close all; clc;
fs = string(filesep) + string(filesep);
fPath = string(pwd)+fs;
windowLengthSec     = 1.3;                          % sliding window length in seconds
windowStepSizeSec   = 0.01;                         % sliding window step size in seconds
GUI_MODE            = 'nogui';                      % whether or not to show the Graphical User Interfaces. Can be 'nogui' or anything else (to show the gui)
VERBOSITY_LEVEL     = 0;                            % Verbosity Level (0=no/minimal output, 2=graphical output)
if ~exist('subj','var') || isempty(subj), subj = "PS04"; else, subj = string(subj); end
if ~exist('earlyFraction','var') || isempty(earlyFraction), earlyFraction = 0.999; end % fraction of pertubation to be flagged as early (or late)
if earlyFraction > .5, warning("early fraction is larger than half of the data, only one fraction (i.e., early) will be produced"); end
projCode = "PS";
trialTypes = ["LEI", "LME", "REI", "RME"];
if earlyFraction < .5
    phases = ["base_epoch_UPT" "early_epoch_CPT" "early_epoch_PPT" "late_epoch_CPT" ...
        "late_epoch_PPT" "post_epoch_UPT"];
else
    phases = ["early_epoch_CPT" "early_epoch_PPT"];
end
%% construct necessary paths and files & adding paths
if ispc
    p2l.root = "Z:\BRaIN\"; p2l.git = "C:\~git\";
elseif isunix
    p2l.root = "~/BRaIN/"; p2l.git = "~/~git/";
end
p2l.eeglab = p2l.git + fs + "eeglab2019_0" + fs;
p2l.eegRepo = p2l.root + "eeg" + fs + projCode + fs + "EEG" + fs;
p2l.EEGsets = p2l.eegRepo + subj + fs + "EEG_sets" + fs; % Where you want to save your .set files

addpath(genpath(fPath))
addpath(genpath(fPath+fs+"funcs"))
addpath(p2l.eeglab)
if ~exist("pop_multifit.m","file"), eeglab; close; end
rmpath(p2l.eeglab + "plugins\MPT\dependency\propertyGrid\") % contains a faulty strjoin.m that crashes MATLAB

for t = trialTypes % create file paths to each trial's BDF file
    p2l.epoch.(t) = p2l.EEGsets + "epoch_fraction" +string(earlyFraction) + fs + "conn" + fs + t +fs;
    if ~isfolder(p2l.epoch.(t)), mkdir(p2l.epoch.(t)); end
    f2l.sets.(t) = subj+"_"+t+"_ICEMG" + ".set";
    for p = phases
        f2l.(p).(t) = subj + "_" + t + "_" + p + ".set";
    end
end

%% fit MVAR
for t = trialTypes
    for p = phases
        EEG = pop_loadset('filename', char(f2l.(p).(t)), 'filepath', char(p2l.epoch.(t)));
        cprintf('Yellow',"loaded " + f2l.(p).(t) + "\n");
        est_dispMVARParamCheck(EEG,struct('morder',EEG.modelOrder,'winlen',windowLengthSec,...
            'winstep',windowStepSizeSec,'verb',VERBOSITY_LEVEL));        
%         try
        [EEG] = pop_est_fitMVAR(EEG,GUI_MODE, ...
                    EEG.CAT.configs.est_selModelOrder.modelingApproach, ...
                    'ModelOrder',EEG.modelOrder);
        [msg1, msg2,msg3]=est_checkMVARParams(EEG,EEG.CAT.configs.est_fitMVAR);
        for a=1:length(msg1)
            disp(msg1{1,a});
        end
        for a=1:length(msg2)
            disp(msg2{1,a});
        end        
        for a=1:length(msg3)
            disp(msg3{1,a});
        end

        % validate the model
        % Here we assess the quality of the fit of our model w.r.t. the data. This
        % step can be slow.
        % We can obtain statistics for residual whiteness, percent consistency, and
        % model stability ...
%         [EEG] = pop_est_validateMVAR(EEG,GUI_MODE,...
%             'checkWhiteness', ...
%             {'alpha' 0.05 ...
%             'statcorrection' 'none' ...
%             'numAcfLags' 50         ...
%             'whitenessCriteria' {'Ljung-Box' 'ACF' 'Box-Pierce' 'Li-McLeod'} ...
%             'winStartIdx' [] ...
%             'prctWinToSample' 100  ...
%             'verb' 0}, ...
%             'checkResidualVariance',...
%             {'alpha' 0.05 ...
%             'statcorrection' 'none' ...
%             'numAcfLags' 50    ...
%             'whitenessCriteria' {}  ...
%             'winStartIdx' []        ...
%             'prctWinToSample' 100   ...
%             'verb' 0}, ...
%             'checkConsistency',    ...
%             {'winStartIdx' []   ...
%             'prctWinToSample' 100 ...
%             'Nr' []                ...
%             'donorm' 0         ...
%             'nlags' []         ...
%             'verb' 0}, ...
%             'checkStability',  ...
%             {'winStartIdx' []   ...
%             'prctWinToSample' 100 ...
%             'verb' 0},     ...
%             'prctWinToSample',70,  ...
%             'winStartIdx',[],      ...
%             'verb',VERBOSITY_LEVEL,...
%             'plot',false);
%         if ~all(EEG(1).CAT.VALIDATION.whitestats.acf.w)
%             disp(subj+"_"+t+"_"+p+"_"+"Residuals are not completely white!");
%         end
        
        % connectivity
        % we use logged window
        EEG = pop_est_mvarConnectivity(EEG,GUI_MODE, ...
            'connmethods',{'dDTF08' 'S'}, ...
            'absvalsq',true,           ...
            'spectraldecibels',true,   ...
            'freqs', logspace(log10(1),log10(64),30), ... %logspace matches Steve, [1:64] ,        ...
            'verb',VERBOSITY_LEVEL); %'freqs',[1,40]
        
        EEG = pop_editset(EEG, 'setname', [EEG.setname '_CONN']);
        pop_saveset(EEG, 'filename', EEG.setname, 'filepath', char(p2l.epoch.(t)));
%         catch
            
%         end

    end
end
